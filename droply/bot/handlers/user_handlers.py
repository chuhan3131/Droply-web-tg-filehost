from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
import urllib.parse

from ..config import BASE_URL
from ..keyboards import main_menu, back_to_main, upload, file_settings_menu


router = Router()


@router.message(Command("start"))
async def start(message: Message):
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    text = (
        f"<b>üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! Droply ‚Äî —É–¥–æ–±–Ω—ã–π —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ –ø—Ä—è–º–æ –≤ Telegram.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è</b>"
    )
    await message.answer(text, reply_markup=main_menu(), parse_mode="HTML")



@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=main_menu(), parse_mode='HTML')
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=main_menu(), parse_mode='HTML')
    await callback.answer()


@router.callback_query(F.data == "upload")
async def upload_callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–µ–º. (–º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä 50 –ú–ë)</b>", reply_markup=upload(), parse_mode='HTML')
    await callback.answer()


@router.callback_query(F.data == "links")
async def my_links(callback: CallbackQuery):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BASE_URL}/api/files/{callback.from_user.id}") as resp:
                if resp.status != 200:
                    await callback.message.edit_text("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤</b>", reply_markup=back_to_main(), parse_mode='HTML')
                    return

                result = await resp.json()
                files = result.get("files", [])
                if not files:
                    await callback.message.edit_text("üìé –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", reply_markup=back_to_main())
                    return
                text = "üìé <b>–í–∞—à–∏ —Ñ–∞–π–ª—ã:</b>"
                kb = InlineKeyboardBuilder()
                for i, f in enumerate(files, 1):
                    kb.row(
                        InlineKeyboardButton(
                            text=f"{i}. {f['filename']}",
                            callback_data=f"file_{f['file_code']}"
                        )
                    )
                kb.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))

                await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    except Exception as e:
        await callback.message.edit_text(f"<b>‚ùå –û—à–∏–±–∫–∞:</b> <code>{e}</code>", reply_markup=back_to_main(), parse_mode='HTML')
    await callback.answer()


@router.callback_query(F.data.startswith("file_"))
async def file_actions(callback: CallbackQuery):
    file_code = callback.data.split("_", 1)[1]
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BASE_URL}/api/stats/{file_code}") as resp:
                if resp.status != 200:
                    await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"); return
                stats = await resp.json()
                size_mb = (stats.get("size", 0) / 1024 / 1024) if stats.get("size") else 0
                await callback.message.edit_text(
                    f"<b>üìÅ –§–∞–π–ª: {stats['filename']}\n\n"
                    f"üì¶ –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB\n"
                    f"üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {stats['visits']} | üì• –°–∫–∞—á–∏–≤–∞–Ω–∏—è: {stats['downloads']}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: <code>{BASE_URL}/{file_code}</code></b>\n",
                    reply_markup=file_settings_menu(file_code, stats["notify_visits"], stats["notify_downloads"]),
                    parse_mode='HTML'
                )
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
    await callback.answer()


@router.callback_query(F.data.startswith("user_toggle_visits_"))
async def user_toggle_visits(callback: CallbackQuery):
    file_code = callback.data.split("_")[-1]
    try:
        async with aiohttp.ClientSession() as s:
            form = aiohttp.FormData()
            form.add_field("user_id", str(callback.from_user.id))
            async with s.patch(f"{BASE_URL}/api/files/{file_code}/notify_visits", data=form) as r:
                if r.status == 200:
                    async with s.get(f"{BASE_URL}/api/stats/{file_code}") as r2:
                        st = await r2.json()
                        size_mb = (st.get("size", 0) / 1024 / 1024) if st.get("size") else 0
                        await callback.message.edit_text(
                            f"<b>üìÅ –§–∞–π–ª: {st['filename']}\n\n"
                            f"üì¶ –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB\n"
                            f"üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {st['visits']} | üì• –°–∫–∞—á–∏–≤–∞–Ω–∏—è: {st['downloads']}\n"
                            f"üîó –°—Å—ã–ª–∫–∞: <code>{BASE_URL}/{file_code}</code></b>\n",
                            reply_markup=file_settings_menu(file_code, st["notify_visits"], st["notify_downloads"]),
                            parse_mode='HTML'
                        )
                else:
                    await callback.answer("–û—à–∏–±–∫–∞")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
    await callback.answer()

@router.callback_query(F.data.startswith("user_toggle_downloads_"))
async def user_toggle_downloads(callback: CallbackQuery):
    file_code = callback.data.split("_")[-1]
    try:
        async with aiohttp.ClientSession() as s:
            form = aiohttp.FormData()
            form.add_field("user_id", str(callback.from_user.id))
            async with s.patch(f"{BASE_URL}/api/files/{file_code}/notify_downloads", data=form) as r:
                if r.status == 200:
                    async with s.get(f"{BASE_URL}/api/stats/{file_code}") as r2:
                        st = await r2.json()
                        size_mb = (st.get("size", 0) / 1024 / 1024) if st.get("size") else 0
                        await callback.message.edit_text(
                            f"<b>üìÅ –§–∞–π–ª: {st['filename']}\n\n"
                            f"üì¶ –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB\n"
                            f"üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {st['visits']} | üì• –°–∫–∞—á–∏–≤–∞–Ω–∏—è: {st['downloads']}\n"
                            f"üîó –°—Å—ã–ª–∫–∞: <code>{BASE_URL}/{file_code}</code></b>\n",
                            reply_markup=file_settings_menu(file_code, st["notify_visits"], st["notify_downloads"]),
                            parse_mode='HTML'
                        )
                else:
                    await callback.answer("–û—à–∏–±–∫–∞")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}")
    await callback.answer()


@router.callback_query(F.data.startswith("delete_"))
async def delete_file(callback: CallbackQuery):
    file_code = callback.data.split("_", 1)[1]
    try:
        async with aiohttp.ClientSession() as session:
            form = aiohttp.FormData()
            form.add_field("user_id", str(callback.from_user.id))
            async with session.delete(f"{BASE_URL}/api/files/{file_code}", data=form) as resp:
                if resp.status == 200:
                    await callback.message.edit_text("<b>‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω</b>", reply_markup=back_to_main(), parse_mode='HTML')
                else:
                    await callback.message.edit_text("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞</b>", reply_markup=back_to_main(), parse_mode='HTML')
    except Exception as e:
        await callback.message.edit_text(f"<b>‚ùå –û—à–∏–±–∫–∞:</b> <code>{e}</code>", reply_markup=back_to_main(), parse_mode='HTML')
    await callback.answer()


@router.callback_query(F.data.startswith("replace_"))
async def replace_file(callback: CallbackQuery, state: FSMContext):
    file_code = callback.data.split("_", 1)[1]
    await state.update_data(replace_file_code=file_code)
    await callback.message.edit_text(
        "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã.\n\n<blockquote><i>üí° –°—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π.</i></blockquote></b>",
        reply_markup=upload(),
        parse_mode='HTML'
    )
    await callback.answer()


@router.message(F.text)
async def handle_text(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("replace_file_code"):
        await message.answer("<b>‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã, –∞ –Ω–µ —Ç–µ–∫—Å—Ç</b>", parse_mode='HTML')
        return


@router.message(F.document | F.photo | F.video | F.audio | F.voice)
async def handle_file(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state and "broadcast" in current_state:
        return

    loading_msg = await message.answer("üîÑ <b>–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...</b>", parse_mode='HTML')

    try:
        if message.document:
            file = message.document
            file_size = file.file_size
            file_name = file.file_name
        elif message.photo:
            file = message.photo[-1]
            file_size = file.file_size
            file_name = f"photo_{file.file_id}.jpg"
        elif message.video:
            file = message.video
            file_size = file.file_size
            file_name = file.file_name or f"video_{file.file_id}.mp4"
        elif message.audio:
            file = message.audio
            file_size = file.file_size
            file_name = file.file_name or f"audio_{file.file_id}.mp3"
        elif message.voice:
            file = message.voice
            file_size = file.file_size
            file_name = f"voice_{file.file_id}.ogg"
        else:
            await loading_msg.edit_text("<b>‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞</b>", parse_mode='HTML')
            return

        MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 –ú–ë
        if file_size > MAX_FILE_SIZE:
            await loading_msg.edit_text(
                f"<b>‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!</b>\n\n"
                f"–†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.2f} –ú–ë\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
                parse_mode='HTML'
            )
            return

        await loading_msg.edit_text("üì• <b>–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª –∏–∑ Telegram...</b>", parse_mode='HTML')

        file_info = await message.bot.get_file(file.file_id)
        downloaded = await message.bot.download_file(file_info.file_path)
        file_bytes = downloaded.read()

        await loading_msg.edit_text("üì§ <b>–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä...</b>", parse_mode='HTML')

        data = await state.get_data()
        replace_file_code = data.get("replace_file_code")

        async with aiohttp.ClientSession() as session:
            form = aiohttp.FormData()
            form.add_field("file", file_bytes, filename=file_name)
            form.add_field("user_id", str(message.from_user.id))

            if replace_file_code:
                await loading_msg.edit_text("üîÑ <b>–ó–∞–º–µ–Ω—è—é —Ñ–∞–π–ª...</b>", parse_mode='HTML')

                async with session.put(f"{BASE_URL}/api/files/{replace_file_code}/replace", data=form) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        await loading_msg.edit_text(
                            f"<b>‚úÖ –§–∞–π–ª –∑–∞–º–µ–Ω—ë–Ω!\n\n"
                            f"üìÅ –ò–º—è: {result['filename']}\n"
                            f"üîó –°—Å—ã–ª–∫–∞: <code>{result['download_url']}</code></b>",
                            reply_markup=back_to_main(),
                            parse_mode='HTML'
                        )
                        await state.clear()
                    else:
                        error_text = await resp.text()
                        await loading_msg.edit_text(
                            f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ñ–∞–π–ª–∞:</b>\n<code>{error_text[:100]}...</code>",
                            parse_mode='HTML'
                        )
            else:
                await loading_msg.edit_text("üì§ <b>–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...</b>", parse_mode='HTML')

                async with session.post(f"{BASE_URL}/api/upload", data=form) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        filename = urllib.parse.unquote(result["filename"])
                        await loading_msg.edit_text(
                            f"<b>‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                            f"üìÅ –ò–º—è: {filename}\n"
                            f"üîó –°—Å—ã–ª–∫–∞: <code>{result['download_url']}</code></b>",
                            reply_markup=back_to_main(),
                            parse_mode='HTML'
                        )
                    else:
                        error_text = await resp.text()
                        await loading_msg.edit_text(
                            f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:</b>\n<code>{error_text[:100]}...</code>",
                            parse_mode='HTML'
                        )

    except Exception as e:
        error_msg = str(e)
        if len(error_msg) > 100:
            error_msg = error_msg[:100] + "..."

        await loading_msg.edit_text(
            f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:</b>\n<code>{error_msg}</code>",
            parse_mode='HTML'
        )
    finally:
        if await state.get_data():
            await state.clear()